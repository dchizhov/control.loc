<?php

/**
 * @file
 * Task_assignment module: creates a nodes to assign 'tasks' to 'employees'.
 *
 * Creates 'assigned_tasks' to assign 'tasks' to 'employees'.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function task_assignment_form_assigned_tasks_node_form_alter(&$form, &$form_state) {

  // "field_nid_employee" field overriding.
  $form['field_nid_employee'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => 'task_assignment_tasks_list_callback',
    'wrapper' => 'tasks-list',
  );

  // Nid of selected employee.
  $selected_employee = isset($form_state['values']['field_nid_employee']['und'][0]['target_id'])
    ? $form_state['values']['field_nid_employee']['und'][0]['target_id'] : '';

  // Creating an empty array.
  $tasks = array();
  // Filling $tasks array by "tasks" nodes.
  $tasks = task_assignment_get_tasks($selected_employee);

  // "field_nid_task" field overriding.
  $form['field_nid_task'][LANGUAGE_NONE]['#options'] = $tasks;
  $form['field_nid_task'][LANGUAGE_NONE]['#weight'] = '2';
  $form['field_nid_task'][LANGUAGE_NONE]['#prefix'] = '<div id="tasks-list">';
  $form['field_nid_task'][LANGUAGE_NONE]['#suffix'] = '</div>';
}

/**
 * Function returns a list of tasks that employee didn't do before.
 */
function task_assignment_get_tasks($employee_nid) {

  $options = array();

  // Fetching all tasks that employee did before.
  $query = db_select('field_data_field_nid_task', 'fdfnt');
  $query->distinct();
  $query->innerJoin('field_data_field_nid_employee', 'fdfne', 'fdfnt.entity_id = fdfne.entity_id');
  $query->fields('fdfnt', array('field_nid_task_target_id'));
  $query->condition('fdfne.field_nid_employee_target_id', $employee_nid);
  $tasks_nids = $query->execute()->fetchAll();

  $query = '';
  // Fetching all tasks to be displayed in select list.
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('type', 'tasks');

  if ($tasks_nids) {
    $nids = array();
    foreach ($tasks_nids as $task_nid) {
      $nids[] = $task_nid->field_nid_task_target_id;
    }
    $query->condition('nid', $nids, 'NOT IN');
  }
  $tasks = $query->execute()->fetchAll();

  if ($tasks) {
    foreach ($tasks as $task) {
      $options[$task->nid] = $task->title;
    }
  }

  return $options;
}

/**
 * Callback function. Selects tasks list to be returned for re-rendering.
 */
function task_assignment_tasks_list_callback($form, $form_state) {
  return $form['field_nid_task'];
}
